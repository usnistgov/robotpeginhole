<?xml version="1.0" encoding="UTF-8"?>
<launch>
   <!-- args supplied by calling roslaunch -->
   <arg name="my_ns" default="/" />
   <arg name="package" default="fanuc_lrmate200id_support" />
   <arg name="dosimmove" default="false"/>
   <arg name="armgroup" default="fanucarm"/>
   <arg name="qtbreak" default="1"/>
   <arg name="robot" default="fanuc_lrmate200id"/>
   <arg name="output" default="screen"/>
   <arg name="jnt_source_list" default="['/lrmate/joint_states']"/>
 

   <!-- args used in this roslaunch -->
   <arg name="fake_execution" default="true" />
   <arg name="allow_trajectory_execution" default="true" />
   <arg name="max_safe_path_cost" default="1" />
   <arg name="jiggle_fraction" default="0.05" />
   <arg name="publish_monitored_planning_scene" default="false" />
   <arg name="capabilities" default="" />
   <arg name="disable_capabilities" default="" />
   <arg name="moveit_manage_controllers" default="false" />

   <!-- GDB Debug Option -->
   <arg name="debug" default="false" />
   <arg unless="$(arg debug)" name="launch_prefix" value="" />
   <arg if="$(arg debug)" name="launch_prefix" value="gdb -x $(arg package)/launch/gdb_settings.gdb --ex run --args" />
   <!-- Verbose Mode Option -->
   <arg name="info" default="true" />
   <arg unless="$(arg info)" name="command_args" value="" />
   <arg if="$(arg info)" name="command_args" value="--debug" />

   <group ns="$(arg my_ns)">
     <!-- <param name="robot_description" textfile="$(arg package)/urdf/myrobot.urdf" /> -->
      <param name="robot_description" command="$(find xacro)/xacro --inorder '$(arg package)/urdf/myrobot.xacro'" /> 
      <param name="robot_description_semantic" textfile="$(arg package)/config/myrobot.srdf" />

      <!-- Load updated joint limits (override information from URDF) -->
      <group ns="robot_description_planning">
         <rosparam command="load" file="$(arg package)/config/joint_limits.yaml" />
      </group>

      <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
      <group ns="robot_description_kinematics">
         <rosparam command="load" file="$(arg package)/config/kinematics.yaml" />
      </group>

      <param name="moveit_manage_controllers" value="$(arg moveit_manage_controllers)" />

      <!-- Set the param that trajectory_execution_manager needs to find the controller plugin -->
      <param name="moveit_controller_manager" value="moveit_fake_controller_manager/MoveItFakeControllerManager" />

      <!-- The rest of the params are specific to this plugin -->
      <rosparam file="$(arg package)/config/fake_controllers.yaml" command="load" />

      <!-- Load joint controller configurations from YAML file to parameter server 
      <rosparam file="$(arg package)/config/ros_controllers.yaml" command="load"/>-->

      <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.2" />
      <param name="trajectory_execution/allowed_goal_duration_margin" value="0.5" />
      <param name="trajectory_execution/allowed_start_tolerance" value="0.01" />

       <include ns="move_group" file="$(arg package)/launch/planning_pipeline.launch.xml">
         <arg name="pipeline" value="ompl" />
      </include>

      <!-- Trajectory Execution Functionality -->
      <include ns="move_group" file="$(arg package)/launch/trajectory_execution.launch.xml">
         <arg name="moveit_manage_controllers" value="true" />
         <arg name="moveit_controller_manager" value="fanuc_lrmate200id" unless="$(arg fake_execution)" />
         <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)" />
      </include>

      <!-- Sensors Functionality -->
      <include ns="move_group" file="$(arg package)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
         <arg name="moveit_sensor_manager" value="fanuc_lrmate200id" />
      </include>

      <!-- Start the actual move_group node/action server -->
      <node name="move_group"  pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" 
            args="$(arg command_args)" launch-prefix="$(arg launch_prefix)">

         <!-- Set the display variable, in case OpenGL code is used internally -->
         <env name="DISPLAY" value="$(optenv DISPLAY :0)" />
         <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)" />
         <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)" />
         <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
         <param name="capabilities" value="$(arg capabilities)" />
         <param name="disable_capabilities" value="$(arg disable_capabilities)" />
         <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
         <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
         <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
         <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
         <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
      </node>
 
      <node name="joint_state_publisher1" pkg="joint_state_publisher" type="joint_state_publisher">
         <param name="/use_gui" value="false" />
         <rosparam param="source_list" subst_value="True">$(arg jnt_source_list)</rosparam>
        <!--<rosparam param="source_list">["/lrmate/joint_states"]</rosparam> -->
         <remap from="robot_description" to="robot_description" />
      </node>
      <node name="robot_state_publisher1" pkg="robot_state_publisher" type="state_publisher">
         <param name="tf_prefix" value="$(arg my_ns)" />
         <remap from="robot_description" to="robot_description" />
      </node>

   <arg name="movemovelaunch_prefix" value="gdb --ex run --args" />
      <rosparam file="$(arg package)/config/crcl.yaml" command="load" />
      <rosparam file="$(arg package)/config/kitting.yaml" command="load" />


     <node name="mojo" pkg="crclapp" 
           type="crclapp" 
           output="$(arg output)" 
           args="ns:=$(arg my_ns) name:=mojo qtbreak:=$(arg qtbreak) armgroup:=$(arg armgroup) robot:=$(arg robot)"
           if="$(eval dosimmove)"
            >
       </node>

   </group>


</launch>
